// Generated by Dagger (https://dagger.dev).
package org.capstone.yourmate.data.repository;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.capstone.yourmate.data.api.ChatApi;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ChatRepository_Factory implements Factory<ChatRepository> {
  private final Provider<FirebaseAuth> authProvider;

  private final Provider<FirebaseDatabase> databaseProvider;

  private final Provider<ChatApi> chatApiProvider;

  public ChatRepository_Factory(Provider<FirebaseAuth> authProvider,
      Provider<FirebaseDatabase> databaseProvider, Provider<ChatApi> chatApiProvider) {
    this.authProvider = authProvider;
    this.databaseProvider = databaseProvider;
    this.chatApiProvider = chatApiProvider;
  }

  @Override
  public ChatRepository get() {
    return newInstance(authProvider.get(), databaseProvider.get(), chatApiProvider.get());
  }

  public static ChatRepository_Factory create(Provider<FirebaseAuth> authProvider,
      Provider<FirebaseDatabase> databaseProvider, Provider<ChatApi> chatApiProvider) {
    return new ChatRepository_Factory(authProvider, databaseProvider, chatApiProvider);
  }

  public static ChatRepository newInstance(FirebaseAuth auth, FirebaseDatabase database,
      ChatApi chatApi) {
    return new ChatRepository(auth, database, chatApi);
  }
}
