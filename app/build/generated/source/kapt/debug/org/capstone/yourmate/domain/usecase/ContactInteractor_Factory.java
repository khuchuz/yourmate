// Generated by Dagger (https://dagger.dev).
package org.capstone.yourmate.domain.usecase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.capstone.yourmate.domain.repository.IContactRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ContactInteractor_Factory implements Factory<ContactInteractor> {
  private final Provider<IContactRepository> contactRepositoryProvider;

  public ContactInteractor_Factory(Provider<IContactRepository> contactRepositoryProvider) {
    this.contactRepositoryProvider = contactRepositoryProvider;
  }

  @Override
  public ContactInteractor get() {
    return newInstance(contactRepositoryProvider.get());
  }

  public static ContactInteractor_Factory create(
      Provider<IContactRepository> contactRepositoryProvider) {
    return new ContactInteractor_Factory(contactRepositoryProvider);
  }

  public static ContactInteractor newInstance(IContactRepository contactRepository) {
    return new ContactInteractor(contactRepository);
  }
}
