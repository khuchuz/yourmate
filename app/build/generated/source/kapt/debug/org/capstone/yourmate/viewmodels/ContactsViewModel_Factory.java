// Generated by Dagger (https://dagger.dev).
package org.capstone.yourmate.viewmodels;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.capstone.yourmate.domain.usecase.ContactUseCase;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ContactsViewModel_Factory implements Factory<ContactsViewModel> {
  private final Provider<ContactUseCase> contactUseCaseProvider;

  public ContactsViewModel_Factory(Provider<ContactUseCase> contactUseCaseProvider) {
    this.contactUseCaseProvider = contactUseCaseProvider;
  }

  @Override
  public ContactsViewModel get() {
    return newInstance(contactUseCaseProvider.get());
  }

  public static ContactsViewModel_Factory create(Provider<ContactUseCase> contactUseCaseProvider) {
    return new ContactsViewModel_Factory(contactUseCaseProvider);
  }

  public static ContactsViewModel newInstance(ContactUseCase contactUseCase) {
    return new ContactsViewModel(contactUseCase);
  }
}
