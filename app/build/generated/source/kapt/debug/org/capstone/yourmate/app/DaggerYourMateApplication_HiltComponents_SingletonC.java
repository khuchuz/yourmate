// Generated by Dagger (https://dagger.dev).
package org.capstone.yourmate.app;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import org.capstone.yourmate.auth.login.LoginActivity;
import org.capstone.yourmate.auth.register.RegisterActivity;
import org.capstone.yourmate.chat.ChatActivity;
import org.capstone.yourmate.data.api.ChatApi;
import org.capstone.yourmate.data.api.YourmateApi;
import org.capstone.yourmate.data.repository.ArticleRepository;
import org.capstone.yourmate.data.repository.AuthRepository;
import org.capstone.yourmate.data.repository.ChatRepository;
import org.capstone.yourmate.data.repository.ContactRepository;
import org.capstone.yourmate.data.repository.PlaceRepository;
import org.capstone.yourmate.data.repository.UserRepository;
import org.capstone.yourmate.di.hilt.DataModule_Companion_ProvideChatApiFactory;
import org.capstone.yourmate.di.hilt.DataModule_Companion_ProvideFirebaseAuthFactory;
import org.capstone.yourmate.di.hilt.DataModule_Companion_ProvideFirebaseCloudMessagingRetrofitFactory;
import org.capstone.yourmate.di.hilt.DataModule_Companion_ProvideFirebaseDatabaseFactory;
import org.capstone.yourmate.di.hilt.DataModule_Companion_ProvideFirebaseMessagingFactory;
import org.capstone.yourmate.di.hilt.DataModule_Companion_ProvideRetrofitFactory;
import org.capstone.yourmate.di.hilt.DataModule_Companion_ProvideYourmateApiFactory;
import org.capstone.yourmate.domain.usecase.ArticleInteractor;
import org.capstone.yourmate.domain.usecase.AuthInteractor;
import org.capstone.yourmate.domain.usecase.ChatInteractor;
import org.capstone.yourmate.domain.usecase.ContactInteractor;
import org.capstone.yourmate.domain.usecase.PlaceInteractor;
import org.capstone.yourmate.domain.usecase.UserInteractor;
import org.capstone.yourmate.home.HomeActivity;
import org.capstone.yourmate.home.ui.chat.ChatFragment;
import org.capstone.yourmate.home.ui.contacts.ContactsFragment;
import org.capstone.yourmate.home.ui.home.HomeFragment;
import org.capstone.yourmate.home.ui.home.HomeViewModel;
import org.capstone.yourmate.home.ui.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import org.capstone.yourmate.home.ui.profile.ProfileFragment;
import org.capstone.yourmate.settings.SettingsActivity;
import org.capstone.yourmate.splash_screen.SplashScreenActivity;
import org.capstone.yourmate.viewmodels.AuthViewModel;
import org.capstone.yourmate.viewmodels.AuthViewModel_HiltModules_KeyModule_ProvideFactory;
import org.capstone.yourmate.viewmodels.ChatViewModel;
import org.capstone.yourmate.viewmodels.ChatViewModel_HiltModules_KeyModule_ProvideFactory;
import org.capstone.yourmate.viewmodels.ContactsViewModel;
import org.capstone.yourmate.viewmodels.ContactsViewModel_HiltModules_KeyModule_ProvideFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerYourMateApplication_HiltComponents_SingletonC extends YourMateApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC = this;

  private DaggerYourMateApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private AuthRepository authRepository() {
    return new AuthRepository(DataModule_Companion_ProvideFirebaseAuthFactory.provideFirebaseAuth(), DataModule_Companion_ProvideFirebaseDatabaseFactory.provideFirebaseDatabase(), DataModule_Companion_ProvideFirebaseMessagingFactory.provideFirebaseMessaging());
  }

  private AuthInteractor authInteractor() {
    return new AuthInteractor(authRepository());
  }

  private ChatApi chatApi() {
    return DataModule_Companion_ProvideChatApiFactory.provideChatApi(DataModule_Companion_ProvideFirebaseCloudMessagingRetrofitFactory.provideFirebaseCloudMessagingRetrofit());
  }

  private ChatRepository chatRepository() {
    return new ChatRepository(DataModule_Companion_ProvideFirebaseAuthFactory.provideFirebaseAuth(), DataModule_Companion_ProvideFirebaseDatabaseFactory.provideFirebaseDatabase(), chatApi());
  }

  private ChatInteractor chatInteractor() {
    return new ChatInteractor(chatRepository());
  }

  private ContactRepository contactRepository() {
    return new ContactRepository(DataModule_Companion_ProvideFirebaseAuthFactory.provideFirebaseAuth(), DataModule_Companion_ProvideFirebaseDatabaseFactory.provideFirebaseDatabase());
  }

  private ContactInteractor contactInteractor() {
    return new ContactInteractor(contactRepository());
  }

  private YourmateApi yourmateApi() {
    return DataModule_Companion_ProvideYourmateApiFactory.provideYourmateApi(DataModule_Companion_ProvideRetrofitFactory.provideRetrofit());
  }

  private PlaceRepository placeRepository() {
    return new PlaceRepository(yourmateApi());
  }

  private PlaceInteractor placeInteractor() {
    return new PlaceInteractor(placeRepository());
  }

  private ArticleRepository articleRepository() {
    return new ArticleRepository(yourmateApi());
  }

  private ArticleInteractor articleInteractor() {
    return new ArticleInteractor(articleRepository());
  }

  private UserRepository userRepository() {
    return new UserRepository(yourmateApi());
  }

  private UserInteractor userInteractor() {
    return new UserInteractor(userRepository());
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @Override
  public void injectYourMateApplication(YourMateApplication yourMateApplication) {
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public YourMateApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerYourMateApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements YourMateApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(
        DaggerYourMateApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public YourMateApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements YourMateApplication_HiltComponents.ActivityC.Builder {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public YourMateApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements YourMateApplication_HiltComponents.FragmentC.Builder {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public YourMateApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements YourMateApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public YourMateApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements YourMateApplication_HiltComponents.ViewC.Builder {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public YourMateApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements YourMateApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public YourMateApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements YourMateApplication_HiltComponents.ServiceC.Builder {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerYourMateApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public YourMateApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends YourMateApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends YourMateApplication_HiltComponents.FragmentC {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @Override
    public void injectChatFragment(ChatFragment chatFragment) {
    }

    @Override
    public void injectContactsFragment(ContactsFragment contactsFragment) {
    }

    @Override
    public void injectHomeFragment(HomeFragment homeFragment) {
    }

    @Override
    public void injectProfileFragment(ProfileFragment profileFragment) {
    }
  }

  private static final class ViewCImpl extends YourMateApplication_HiltComponents.ViewC {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends YourMateApplication_HiltComponents.ActivityC {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(4).add(AuthViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ChatViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ContactsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectLoginActivity(LoginActivity loginActivity) {
    }

    @Override
    public void injectRegisterActivity(RegisterActivity registerActivity) {
    }

    @Override
    public void injectChatActivity(ChatActivity chatActivity) {
    }

    @Override
    public void injectHomeActivity(HomeActivity homeActivity) {
    }

    @Override
    public void injectSettingsActivity(SettingsActivity settingsActivity) {
    }

    @Override
    public void injectSplashScreenActivity(SplashScreenActivity splashScreenActivity) {
    }
  }

  private static final class ViewModelCImpl extends YourMateApplication_HiltComponents.ViewModelC {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AuthViewModel> authViewModelProvider;

    private Provider<ChatViewModel> chatViewModelProvider;

    private Provider<ContactsViewModel> contactsViewModelProvider;

    private Provider<HomeViewModel> homeViewModelProvider;

    private ViewModelCImpl(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private AuthViewModel authViewModel() {
      return new AuthViewModel(singletonC.authInteractor());
    }

    private ChatViewModel chatViewModel() {
      return new ChatViewModel(singletonC.chatInteractor());
    }

    private ContactsViewModel contactsViewModel() {
      return new ContactsViewModel(singletonC.contactInteractor());
    }

    private HomeViewModel homeViewModel() {
      return new HomeViewModel(singletonC.placeInteractor(), singletonC.articleInteractor(), singletonC.userInteractor());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.authViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.chatViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.contactsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.homeViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(4).put("org.capstone.yourmate.viewmodels.AuthViewModel", (Provider) authViewModelProvider).put("org.capstone.yourmate.viewmodels.ChatViewModel", (Provider) chatViewModelProvider).put("org.capstone.yourmate.viewmodels.ContactsViewModel", (Provider) contactsViewModelProvider).put("org.capstone.yourmate.home.ui.home.HomeViewModel", (Provider) homeViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // org.capstone.yourmate.viewmodels.AuthViewModel 
          return (T) viewModelCImpl.authViewModel();

          case 1: // org.capstone.yourmate.viewmodels.ChatViewModel 
          return (T) viewModelCImpl.chatViewModel();

          case 2: // org.capstone.yourmate.viewmodels.ContactsViewModel 
          return (T) viewModelCImpl.contactsViewModel();

          case 3: // org.capstone.yourmate.home.ui.home.HomeViewModel 
          return (T) viewModelCImpl.homeViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends YourMateApplication_HiltComponents.ActivityRetainedC {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerYourMateApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends YourMateApplication_HiltComponents.ServiceC {
    private final DaggerYourMateApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerYourMateApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}
