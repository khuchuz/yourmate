// Generated by Dagger (https://dagger.dev).
package org.capstone.yourmate.home.ui.home;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.capstone.yourmate.domain.usecase.ArticleUseCase;
import org.capstone.yourmate.domain.usecase.PlaceUseCase;
import org.capstone.yourmate.domain.usecase.UserUseCase;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<PlaceUseCase> placeUseCaseProvider;

  private final Provider<ArticleUseCase> articleUseCaseProvider;

  private final Provider<UserUseCase> userUseCaseProvider;

  public HomeViewModel_Factory(Provider<PlaceUseCase> placeUseCaseProvider,
      Provider<ArticleUseCase> articleUseCaseProvider, Provider<UserUseCase> userUseCaseProvider) {
    this.placeUseCaseProvider = placeUseCaseProvider;
    this.articleUseCaseProvider = articleUseCaseProvider;
    this.userUseCaseProvider = userUseCaseProvider;
  }

  @Override
  public HomeViewModel get() {
    return newInstance(placeUseCaseProvider.get(), articleUseCaseProvider.get(), userUseCaseProvider.get());
  }

  public static HomeViewModel_Factory create(Provider<PlaceUseCase> placeUseCaseProvider,
      Provider<ArticleUseCase> articleUseCaseProvider, Provider<UserUseCase> userUseCaseProvider) {
    return new HomeViewModel_Factory(placeUseCaseProvider, articleUseCaseProvider, userUseCaseProvider);
  }

  public static HomeViewModel newInstance(PlaceUseCase placeUseCase, ArticleUseCase articleUseCase,
      UserUseCase userUseCase) {
    return new HomeViewModel(placeUseCase, articleUseCase, userUseCase);
  }
}
