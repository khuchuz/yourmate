// Generated by Dagger (https://dagger.dev).
package org.capstone.yourmate.data.repository;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.messaging.FirebaseMessaging;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthRepository_Factory implements Factory<AuthRepository> {
  private final Provider<FirebaseAuth> authProvider;

  private final Provider<FirebaseDatabase> databaseProvider;

  private final Provider<FirebaseMessaging> messagingProvider;

  public AuthRepository_Factory(Provider<FirebaseAuth> authProvider,
      Provider<FirebaseDatabase> databaseProvider, Provider<FirebaseMessaging> messagingProvider) {
    this.authProvider = authProvider;
    this.databaseProvider = databaseProvider;
    this.messagingProvider = messagingProvider;
  }

  @Override
  public AuthRepository get() {
    return newInstance(authProvider.get(), databaseProvider.get(), messagingProvider.get());
  }

  public static AuthRepository_Factory create(Provider<FirebaseAuth> authProvider,
      Provider<FirebaseDatabase> databaseProvider, Provider<FirebaseMessaging> messagingProvider) {
    return new AuthRepository_Factory(authProvider, databaseProvider, messagingProvider);
  }

  public static AuthRepository newInstance(FirebaseAuth auth, FirebaseDatabase database,
      FirebaseMessaging messaging) {
    return new AuthRepository(auth, database, messaging);
  }
}
